/*
 * java-math-library is a Java library focused on number theory, but not necessarily limited to it. It is based on the PSIQS 4.0 factoring project.
 * Copyright (C) 2018 Tilman Neumann - tilman.neumann@web.de
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, see <http://www.gnu.org/licenses/>.
 */
package de.tilman_neumann.jml.factor.hart;

import java.math.BigInteger;

import org.apache.log4j.Logger;

import de.tilman_neumann.jml.factor.FactorAlgorithm;
import de.tilman_neumann.jml.factor.tdiv.TDiv63Inverse;
import de.tilman_neumann.jml.gcd.Gcd63;

/**
 * A Hart algorithm using different multiplier chains for each bit size of N.
 * These chains have been computed from an exhaustive search of sqrt(N) k-values x all N values;
 * the elements of the chains have been selected by the number of N factored by some k via Hart's core factor test routine.
 * 
 * @author Tilman Neumann
 */
public class Hart_MultiplierChain_SqrtN extends FactorAlgorithm {
	@SuppressWarnings("unused")
	private static final Logger LOG = Logger.getLogger(Hart_MultiplierChain_SqrtN.class);

	/** This constant is used for fast rounding of double values to long. */
	private static final double ROUND_UP_DOUBLE = 0.9999999665;

	private static final int MAX_BITS = 28;

	private static final int[][] kArrays = new int[MAX_BITS+1][];
	private static final double[][] kSqrtArrays = new double[MAX_BITS+1][];
	private static final int[] tDivBounds = new int[MAX_BITS+1];
	
	private static final TDiv63Inverse tdiv = new TDiv63Inverse(1<<21);
	
	private long N, fourN;
	private double sqrt4N;
	private final Gcd63 gcdEngine = new Gcd63();

	protected boolean doTDivFirst;

	static {
		tDivBounds[3] =  2; /*   1 k */ kArrays[3]  = new int[] {2};
		tDivBounds[4] =  2; /*   1 k */ kArrays[4]  = new int[] {2};
		tDivBounds[5] =  2; /*   2 k */ kArrays[5]  = new int[] {2, 5};
		tDivBounds[6] =  2; /*   3 k */ kArrays[6]  = new int[] {2, 3, 5};
		tDivBounds[7] =  2; /*   4 k */ kArrays[7]  = new int[] {6, 5, 2, 3};
		tDivBounds[8] =  2; /*   5 k */ kArrays[8]  = new int[] {3, 14, 4, 15, 6};
		tDivBounds[9] =  3; /*   9 k */ kArrays[9]  = new int[] {18, 6, 21, 12, 22, 4, 10, 19, 7};
		tDivBounds[10]=  3; /*   9 k */ kArrays[10] = new int[] {30, 18, 6, 10, 29, 9, 12, 27, 31};
		tDivBounds[11]=  5; /*  12 k */ kArrays[11] = new int[] {45, 30, 42, 18, 10, 6, 12, 24, 41, 44, 5, 7};
		tDivBounds[12]=  5; /*  22 k */ kArrays[12] = new int[] {30, 42, 54, 18, 10, 22, 63, 14, 60, 36, 57, 29, 61, 62, 59, 3, 8, 21, 23, 24, 51, 55};
		tDivBounds[13]=  7; /*  27 k */ kArrays[13] = new int[] {90, 45, 70, 30, 14, 42, 54, 22, 78, 18, 66, 87, 34, 24, 12, 89, 1, 2, 83, 4, 31, 37, 44, 55, 79, 81, 85};
		tDivBounds[14]=  7; /*  30 k */ kArrays[14] = new int[] {90, 45, 126, 70, 108, 60, 30, 20, 78, 42, 24, 16, 54, 34, 125, 50, 102, 121, 66, 127, 18, 75, 36, 22, 77, 1, 63, 113, 117, 123};
		tDivBounds[15]= 11; /*  44 k */ kArrays[15] = new int[] {90, 45, 165, 126, 75, 110, 180, 150, 30, 66, 54, 102, 24, 78, 36, 46, 144, 162, 12, 60, 42, 181, 81, 26, 140, 179, 76, 171, 132, 20, 175, 177, 120, 169, 8, 105, 170, 173, 2, 47, 52, 53, 129, 167};
		tDivBounds[16]= 13; /*  55 k */ kArrays[16] = new int[] {210, 90, 165, 252, 126, 105, 75, 150, 186, 234, 42, 60, 50, 34, 114, 138, 102, 168, 68, 78, 30, 198, 255, 36, 54, 48, 220, 9, 253, 84, 190, 162, 251, 180, 70, 254, 100, 228, 249, 243, 38, 87, 247, 18, 82, 117, 15, 25, 55, 77, 83, 91, 111, 241, 245};
		tDivBounds[17]= 17; /*  64 k */ kArrays[17] = new int[] {210, 315, 270, 135, 90, 180, 231, 162, 330, 198, 252, 294, 42, 234, 102, 150, 114, 60, 78, 126, 48, 354, 66, 54, 138, 72, 84, 361, 306, 174, 100, 108, 222, 186, 276, 46, 359, 362, 91, 116, 357, 2, 266, 36, 353, 50, 355, 105, 349, 351, 92, 322, 229, 347, 1, 169, 253, 63, 127, 139, 141, 171, 179, 223};
		tDivBounds[18]= 19; /*  84 k */ kArrays[18] = new int[] {210, 315, 270, 90, 45, 180, 126, 147, 450, 234, 390, 330, 294, 252, 198, 495, 102, 360, 420, 78, 60, 462, 66, 168, 72, 108, 510, 138, 150, 222, 118, 342, 312, 378, 82, 162, 486, 188, 282, 396, 94, 130, 511, 444, 246, 81, 114, 6, 258, 509, 140, 84, 4, 505, 507, 18, 327, 497, 62, 153, 435, 503, 441, 501, 152, 253, 410, 20, 171, 231, 273, 499, 1, 74, 361, 374, 44, 55, 75, 77, 267, 285, 371, 405};
		tDivBounds[19]= 23; /* 105 k */ kArrays[19] = new int[] {630, 210, 525, 450, 405, 585, 150, 690, 660, 315, 126, 90, 546, 330, 198, 270, 180, 390, 720, 470, 360, 426, 225, 294, 252, 498, 378, 102, 594, 342, 110, 162, 570, 522, 118, 238, 186, 282, 306, 138, 84, 170, 408, 96, 474, 222, 258, 602, 723, 130, 324, 144, 156, 108, 438, 612, 6, 648, 234, 721, 312, 196, 480, 724, 666, 246, 719, 462, 420, 717, 465, 504, 713, 715, 243, 588, 168, 714, 253, 348, 189, 435, 709, 711, 112, 215, 247, 55, 231, 595, 374, 540, 9, 37, 190, 200, 529, 2, 43, 120, 211, 229, 239, 539, 631};
		tDivBounds[20]= 31; /* 141 k */ kArrays[20] = new int[] {630, 210, 525, 450, 945, 45, 90, 270, 126, 990, 330, 870, 660, 150, 714, 770, 690, 546, 66, 825, 198, 1020, 470, 738, 378, 570, 342, 510, 420, 306, 258, 900, 486, 225, 286, 396, 966, 166, 610, 134, 438, 362, 294, 186, 142, 840, 792, 588, 930, 246, 318, 158, 118, 234, 176, 222, 762, 414, 468, 530, 814, 504, 350, 648, 1023, 672, 282, 385, 558, 168, 190, 204, 936, 120, 220, 84, 60, 1021, 400, 380, 130, 612, 243, 180, 854, 1008, 1019, 426, 144, 490, 44, 1017, 136, 96, 224, 1022, 1015, 1013, 266, 861, 374, 351, 465, 600, 238, 1011, 300, 435, 516, 152, 252, 1009, 171, 231, 872, 3, 9, 30, 70, 95, 132, 423, 27, 37, 105, 295, 390, 453, 11, 19, 25, 31, 199, 255, 267, 269, 307, 309, 347, 365, 479};
		tDivBounds[21]= 37; /* 169 k */ kArrays[21] = new int[] {630, 210, 1170, 1050, 450, 270, 1365, 390, 945, 90, 126, 546, 330, 234, 405, 870, 990, 840, 180, 774, 1020, 675, 1290, 910, 714, 1254, 486, 1410, 1206, 738, 594, 570, 522, 198, 690, 282, 612, 434, 342, 1080, 1446, 798, 170, 894, 258, 190, 654, 468, 1110, 374, 1326, 966, 306, 294, 504, 420, 246, 1140, 222, 818, 750, 318, 936, 1362, 1230, 354, 540, 406, 216, 672, 588, 564, 366, 846, 166, 186, 174, 100, 648, 1200, 1447, 202, 1386, 1014, 289, 462, 240, 380, 230, 474, 702, 264, 252, 760, 498, 440, 1278, 1026, 954, 732, 1445, 1296, 288, 280, 525, 400, 300, 776, 1443, 1056, 18, 310, 1441, 924, 518, 1437, 1344, 861, 322, 534, 576, 1092, 1225, 1439, 1448, 558, 1435, 1433, 1035, 81, 418, 1369, 1302, 1139, 333, 6, 86, 110, 192, 703, 595, 1416, 351, 507, 165, 557, 1120, 42, 610, 775, 841, 1023, 38, 46, 55, 127, 143, 175, 513, 523, 567, 585, 629, 655, 699, 733, 851, 901, 1314};
		tDivBounds[22]= 43; /* 211 k */ kArrays[22] = new int[] {630, 1890, 990, 1575, 270, 1050, 450, 390, 1350, 1638, 546, 234, 330, 1980, 1386, 1155, 1716, 1785, 1530, 570, 1430, 1254, 462, 1995, 1110, 858, 810, 1485, 1170, 495, 594, 1710, 675, 1206, 1674, 780, 1290, 945, 1026, 1320, 1080, 900, 1230, 1782, 522, 834, 1410, 762, 738, 702, 1134, 966, 1610, 1848, 2046, 366, 882, 1938, 1746, 610, 648, 1494, 318, 720, 252, 798, 918, 282, 306, 534, 1452, 378, 432, 340, 402, 292, 474, 414, 1560, 246, 1818, 666, 350, 262, 942, 1008, 492, 558, 580, 684, 506, 2016, 1182, 178, 1089, 1278, 240, 750, 1926, 360, 298, 612, 1380, 276, 440, 2047, 422, 1470, 870, 1146, 854, 828, 1074, 480, 258, 1860, 1582, 1428, 310, 324, 518, 1092, 1512, 1302, 625, 1944, 972, 290, 930, 2045, 646, 1650, 1326, 1680, 400, 962, 660, 384, 90, 2043, 618, 372, 2041, 840, 36, 228, 348, 1356, 60, 1953, 696, 2039, 1035, 2037, 1770, 730, 605, 2035, 729, 1224, 2033, 1711, 1083, 1620, 408, 680, 18, 598, 1794, 110, 2025, 1323, 704, 106, 438, 498, 690, 1056, 1032, 1431, 147, 1275, 642, 1554, 6, 144, 861, 952, 1190, 1862, 78, 186, 770, 1249, 77, 550, 1161, 1, 5, 49, 325, 1025, 1085, 1203, 1311, 1361, 1419, 1641, 1731, 1829, 1935};
		tDivBounds[23]= 53; /* 281 k */ kArrays[23] = new int[] {630, 1890, 2310, 990, 450, 1050, 1350, 330, 1575, 2475, 462, 1638, 1980, 1470, 1386, 2730, 2394, 390, 90, 1530, 2790, 1710, 2850, 1155, 2070, 570, 2142, 2550, 2610, 2670, 546, 350, 1782, 2010, 1254, 2106, 1650, 770, 2184, 858, 1848, 910, 1320, 360, 1610, 1950, 2430, 1290, 1089, 1410, 1206, 1494, 2226, 1680, 966, 1818, 1440, 1746, 420, 2262, 2346, 741, 840, 1122, 1230, 1926, 666, 876, 945, 648, 790, 1020, 1182, 690, 2490, 2034, 342, 492, 2886, 814, 402, 588, 890, 438, 610, 378, 518, 474, 558, 2580, 714, 2640, 730, 534, 1578, 756, 1074, 930, 430, 2706, 1098, 504, 1146, 1323, 830, 1278, 2754, 2520, 370, 1010, 1038, 2826, 798, 1362, 410, 1554, 1866, 2160, 680, 2895, 1512, 600, 738, 484, 1170, 2466, 2280, 700, 952, 2190, 2370, 620, 1722, 1770, 654, 980, 774, 1422, 510, 338, 1794, 582, 520, 1452, 384, 1908, 1296, 1602, 324, 1054, 636, 1200, 396, 1116, 1224, 1326, 1140, 528, 894, 1080, 2893, 720, 1260, 938, 2040, 2896, 352, 440, 918, 460, 2130, 750, 845, 468, 2030, 2100, 54, 1668, 1242, 498, 362, 2889, 1158, 2891, 1620, 1686, 1740, 861, 2211, 1062, 850, 1860, 1134, 2887, 1008, 2883, 2885, 2338, 2881, 1026, 414, 1225, 2415, 820, 682, 870, 248, 2542, 1302, 2204, 25, 49, 1083, 1891, 783, 1092, 2775, 2882, 612, 2701, 243, 594, 2530, 156, 1953, 2228, 125, 540, 2006, 1107, 1330, 495, 618, 805, 1836, 2, 5, 145, 405, 665, 1365, 425, 776, 1485, 41, 148, 247, 361, 729, 801, 905, 981, 1425, 1781, 2133, 2145, 2646, 1, 47, 58, 78, 166, 174, 256, 345, 422, 535, 745, 755, 817, 827, 931, 991, 1364, 2049, 2263, 2345, 2435, 2533, 2623, 2737};
		tDivBounds[24]= 61; /* 356 k */ kArrays[24] = new int[] {630, 1890, 4095, 2310, 2730, 90, 1050, 3510, 3990, 1350, 3570, 3150, 2970, 1650, 1386, 1995, 2835, 2520, 1530, 3780, 1575, 510, 1710, 2394, 3654, 2142, 2430, 1785, 2340, 966, 2625, 3330, 714, 3450, 570, 2178, 2070, 990, 3078, 1950, 3390, 2106, 1512, 1110, 3255, 2550, 462, 1326, 1071, 2790, 3906, 3726, 2898, 2478, 2214, 3612, 1620, 3030, 1190, 3210, 1302, 2262, 774, 1680, 1026, 4050, 1845, 1554, 2370, 1410, 2682, 1225, 1926, 1974, 1494, 2610, 558, 882, 930, 2934, 3294, 1155, 3822, 3960, 2754, 840, 900, 1449, 2040, 2574, 2010, 1746, 792, 2646, 588, 1275, 474, 1794, 1128, 750, 2826, 546, 3690, 3250, 690, 950, 3870, 3114, 854, 1092, 606, 534, 642, 2466, 1866, 2862, 498, 522, 2280, 762, 3000, 1254, 730, 3180, 870, 678, 1470, 1578, 618, 486, 1368, 1206, 1818, 3366, 1602, 654, 1070, 1008, 1170, 1430, 2232, 3420, 814, 3762, 1770, 666, 704, 3534, 1038, 1722, 918, 2187, 1278, 1230, 826, 3480, 4092, 2700, 1148, 580, 2502, 598, 738, 1842, 1914, 1638, 3060, 1686, 1452, 1320, 800, 2170, 2100, 4014, 980, 1662, 2124, 468, 360, 480, 780, 1980, 2460, 2400, 910, 1332, 490, 1078, 3948, 942, 2940, 720, 506, 1188, 1218, 1404, 1242, 520, 896, 2184, 2650, 1296, 524, 605, 540, 1260, 4093, 564, 1154, 2034, 550, 1482, 2050, 700, 1066, 2604, 3864, 1020, 1140, 1548, 1006, 2688, 2160, 4091, 3276, 648, 2082, 1986, 868, 4089, 2622, 612, 1107, 2774, 2052, 624, 1560, 4085, 4094, 4087, 258, 4081, 2904, 4083, 98, 1596, 632, 1743, 3081, 1116, 2820, 2670, 2196, 3741, 954, 2244, 3015, 1440, 1681, 2301, 514, 1094, 3577, 3969, 3003, 3222, 2883, 2714, 2784, 2832, 3850, 25, 2415, 3675, 1587, 3321, 2868, 454, 676, 802, 2645, 532, 2, 1392, 48, 925, 2701, 1692, 2300, 3680, 38, 660, 3978, 396, 4, 5, 684, 996, 345, 790, 1182, 3618, 54, 846, 1365, 8, 770, 1039, 1069, 1335, 2889, 3572, 45, 49, 254, 270, 281, 1014, 1081, 1169, 1257, 1359, 1463, 1615, 1730, 2339, 2583, 109, 118, 150, 155, 175, 330, 337, 379, 1035, 1125, 1179, 1213, 1283, 1301, 1361, 1387, 1421, 1481, 1523, 1557, 1675, 1725, 1817, 1875, 1925, 1983, 2087, 2211, 3894};
		tDivBounds[25]= 73; /* 457 k */ kArrays[25] = new int[] {630, 1890, 2310, 4095, 4410, 2730, 4950, 1050, 4725, 3990, 2970, 3150, 3780, 4590, 1575, 5355, 3465, 450, 2142, 1365, 714, 1638, 4158, 2625, 770, 4914, 5775, 2394, 2205, 3510, 3234, 5130, 3570, 4620, 3690, 270, 1386, 4830, 3015, 5610, 3654, 4200, 2898, 2835, 825, 1950, 1710, 4500, 1110, 3375, 2100, 4662, 2340, 5460, 4998, 3300, 1785, 3738, 4290, 990, 5190, 2670, 5070, 1995, 2700, 3930, 4554, 2166, 2580, 780, 4350, 3198, 2262, 2940, 2754, 3612, 5310, 5382, 3894, 2475, 4230, 3450, 1482, 1026, 2046, 5550, 3822, 2790, 4470, 3270, 5238, 2070, 3078, 3960, 3330, 1686, 870, 4030, 1764, 2610, 1521, 2520, 798, 4770, 2550, 3402, 3120, 1827, 2280, 3366, 1260, 3534, 1449, 672, 1092, 5502, 3858, 2646, 1320, 1918, 1218, 1152, 754, 732, 1410, 2238, 930, 910, 4872, 2370, 2124, 1302, 4710, 1554, 2422, 1740, 1662, 1278, 946, 3042, 5670, 1610, 1074, 702, 1860, 5742, 1010, 2190, 4122, 858, 1344, 1500, 648, 1134, 1170, 742, 2022, 882, 2490, 896, 5274, 2870, 1974, 682, 1200, 1590, 5040, 1530, 810, 660, 2820, 5418, 840, 2454, 966, 690, 1430, 1238, 1464, 4266, 1794, 3000, 4320, 726, 2214, 4380, 4074, 5166, 3726, 1186, 1368, 4428, 3180, 1722, 826, 3480, 1932, 1120, 1830, 1064, 3420, 1875, 2838, 978, 4794, 1570, 5790, 3108, 1038, 1626, 1998, 790, 2926, 918, 954, 1450, 5346, 760, 5106, 1690, 846, 4524, 5700, 1290, 1810, 1398, 2086, 1000, 1540, 1518, 2772, 1254, 1330, 3618, 5580, 1908, 1674, 2322, 1650, 4752, 3600, 2286, 1850, 822, 1086, 1350, 1098, 2366, 2478, 1782, 1758, 2448, 2868, 2622, 4032, 3024, 5789, 1878, 1230, 650, 3774, 1158, 670, 942, 5658, 3810, 1206, 3060, 4110, 1146, 2538, 700, 3230, 830, 708, 1020, 5787, 748, 720, 2514, 888, 902, 322, 2574, 2688, 1428, 3258, 1274, 4674, 2604, 4170, 4982, 4056, 5785, 3348, 2400, 1968, 2702, 1314, 4002, 3564, 5783, 378, 2346, 2025, 1440, 1608, 2856, 5786, 5791, 5214, 1980, 18, 5781, 5779, 804, 2052, 3720, 4466, 2030, 5777, 1089, 1182, 3390, 2809, 3655, 1380, 5792, 3210, 3486, 1360, 550, 2002, 5253, 4851, 3458, 406, 324, 2106, 816, 1400, 1572, 5075, 54, 3081, 1426, 2146, 5010, 2808, 5340, 5565, 3924, 300, 1717, 4371, 2592, 3577, 3813, 5454, 30, 658, 4753, 3087, 2645, 1116, 3151, 1058, 1240, 1463, 3634, 675, 2187, 662, 854, 4452, 4845, 2527, 2548, 4465, 1083, 2130, 45, 1125, 2172, 4510, 3666, 5546, 1515, 364, 860, 1470, 2442, 2795, 3360, 5096, 1488, 1692, 2160, 3703, 3770, 3900, 5671, 5738, 441, 674, 2065, 42, 737, 782, 1527, 5434, 49, 405, 1225, 2351, 3310, 3403, 4593, 1, 4, 39, 60, 62, 140, 153, 345, 375, 551, 683, 775, 787, 805, 855, 2075, 2109, 2135, 2185, 2211, 2261, 2379, 2429, 2471, 2521, 2563, 2671, 2721, 2845, 2903, 3043, 3125, 3199, 3281, 3453, 3747, 3861, 3983, 5151};
		tDivBounds[26]= 89; /* 587 k */ kArrays[26] = new int[] {6930, 8190, 2310, 1890, 630, 4095, 3150, 1575, 1365, 4725, 3465, 3990, 5985, 2730, 2970, 1050, 4158, 450, 4950, 2394, 3510, 4590, 1638, 714, 6090, 7650, 105, 3780, 5775, 4914, 6300, 7245, 2898, 5850, 7722, 990, 7425, 3654, 6825, 4410, 3570, 7350, 1386, 270, 4830, 5610, 7020, 7182, 3255, 924, 3015, 6630, 6510, 7875, 5130, 4200, 4554, 1710, 6210, 5460, 1110, 3390, 4290, 1950, 1482, 1755, 4998, 3300, 7590, 5310, 5190, 4500, 5565, 5370, 2574, 4620, 5070, 2142, 8130, 966, 4230, 6150, 7980, 7770, 2070, 2706, 7110, 3906, 3360, 6370, 3810, 3738, 5238, 6030, 4326, 3330, 4662, 3612, 6570, 6270, 4446, 2010, 1260, 4770, 3870, 2835, 1680, 2610, 4872, 5502, 2100, 3180, 3120, 7938, 3420, 3078, 7524, 4374, 5742, 5922, 6450, 2205, 6762, 1500, 1806, 2475, 1422, 2265, 1026, 5418, 2778, 7290, 7050, 2350, 4698, 4026, 5814, 3690, 7830, 2655, 8070, 2520, 5670, 5880, 3942, 6678, 4266, 2870, 5346, 2160, 1218, 7410, 1974, 5034, 3210, 2415, 5274, 1870, 1602, 3054, 6972, 942, 2926, 1014, 3534, 1302, 2550, 4122, 1128, 1176, 6870, 5100, 3720, 5166, 3834, 1926, 1764, 1554, 1410, 6348, 1530, 2330, 1158, 1062, 2122, 2754, 1730, 4482, 4794, 6708, 2230, 2370, 2050, 1450, 1330, 7470, 1086, 2180, 1466, 3024, 1788, 3102, 954, 2802, 1274, 3240, 1190, 1992, 2286, 6810, 1242, 1662, 1618, 5700, 5970, 8022, 978, 1146, 1098, 5544, 1850, 7890, 2682, 7140, 2442, 3450, 1002, 3978, 2994, 2592, 1038, 1346, 2028, 1290, 2950, 2498, 1516, 1572, 3480, 3270, 4734, 1074, 2082, 1824, 6402, 7236, 1204, 1692, 2632, 4070, 4530, 1908, 1316, 2250, 2202, 930, 1746, 1230, 6075, 1398, 1436, 7686, 1362, 4350, 3762, 2842, 2466, 3594, 5778, 2418, 6561, 6174, 916, 3636, 2658, 5220, 1584, 7542, 1650, 6246, 6468, 1170, 5574, 4098, 2270, 6900, 5640, 1374, 8191, 2530, 4182, 1540, 1140, 6114, 4980, 1122, 4040, 5382, 6060, 1254, 2820, 6006, 1834, 3564, 4626, 6600, 7326, 7080, 1860, 1770, 6552, 2214, 1722, 3684, 4875, 2486, 7776, 1960, 6864, 3894, 1936, 2886, 4020, 7620, 2290, 5910, 3864, 6750, 3924, 1494, 2850, 7380, 3318, 1634, 3954, 3030, 3132, 3220, 8100, 3168, 7434, 2114, 8189, 968, 1278, 7884, 3348, 950, 3192, 4836, 3000, 3438, 2390, 1338, 260, 4140, 8160, 2044, 1570, 2646, 4878, 2910, 960, 4320, 6390, 6822, 5934, 4470, 7800, 2412, 361, 4260, 1674, 3393, 940, 1360, 1592, 3294, 1880, 6970, 8187, 6330, 8185, 7230, 4416, 6426, 1200, 1700, 7476, 7242, 1180, 3402, 1476, 984, 5450, 2226, 8181, 2448, 3366, 2430, 3246, 8177, 12, 2184, 8183, 4386, 2568, 1521, 3468, 1206, 5490, 3481, 8179, 1456, 1008, 992, 2058, 1716, 5520, 4563, 6636, 3542, 1800, 770, 8001, 3498, 194, 1018, 1786, 6555, 7315, 5040, 6, 7021, 4107, 1270, 1060, 675, 100, 1034, 2640, 4080, 6786, 1514, 1760, 2700, 5735, 2130, 510, 6441, 6534, 3813, 4654, 7812, 1040, 1566, 5151, 7854, 356, 1820, 504, 1310, 3725, 606, 7940, 2660, 7439, 4710, 1070, 5394, 2714, 7385, 1134, 1080, 3666, 60, 78, 2295, 3726, 7503, 45, 150, 245, 441, 518, 4805, 2826, 3552, 7381, 5740, 495, 506, 3927, 8094, 660, 1932, 4556, 4810, 7006, 2025, 7175, 7992, 8064, 1677, 2190, 4680, 62, 1318, 1596, 1612, 234, 483, 555, 2478, 2527, 1232, 2034, 7700, 2732, 4018, 4375, 7597, 175, 498, 632, 1089, 1116, 2053, 3692, 52, 255, 258, 370, 1107, 1617, 7560, 81, 4788, 6903, 10, 318, 1690, 2155, 2346, 3969, 4389, 5222, 5371, 6615, 6623, 7957, 11, 189, 286, 410, 1047, 1088, 1111, 1237, 1371, 1499, 2733, 4097, 4155, 4221, 4361, 4435, 4517, 4607, 4689, 4861, 4951, 5049, 5139, 5253, 5359, 5473, 5595, 5709, 5831, 5977, 6115, 6261, 6415, 6747, 7749, 7983};
		tDivBounds[27]=107; /* 742 k */ kArrays[27] = new int[] {6930, 8190, 2310, 1890, 630, 10710, 3150, 11550, 1575, 2970, 9450, 3465, 990, 4725, 3990, 10395, 450, 3570, 3510, 1350, 4950, 2730, 4410, 1638, 8085, 6090, 6630, 1386, 10530, 5775, 4914, 6300, 6435, 270, 5850, 5940, 7182, 8694, 6006, 6825, 3780, 6510, 7020, 540, 8775, 3234, 4590, 7425, 6210, 8316, 9990, 2574, 4095, 7770, 5610, 7722, 3654, 6426, 4620, 3822, 5130, 4554, 10920, 2835, 8370, 10626, 3366, 5490, 9870, 9555, 6552, 7980, 3300, 9240, 9030, 7245, 1710, 4998, 8505, 7350, 9765, 6615, 4290, 7938, 7650, 9090, 7854, 10050, 4200, 2070, 11340, 1540, 5370, 4662, 10230, 11130, 2925, 5454, 4830, 5292, 11025, 4230, 2610, 10164, 5070, 8610, 11490, 5166, 10770, 2205, 5226, 8820, 9660, 3015, 10850, 7590, 7490, 4158, 7140, 7062, 2478, 10098, 9150, 10350, 6678, 1485, 4335, 8430, 2010, 8970, 5330, 4455, 9390, 4770, 5985, 3198, 9198, 7542, 2394, 8550, 6354, 9810, 9270, 10290, 6726, 11214, 3930, 5418, 1430, 9330, 5538, 6050, 7434, 6978, 2370, 10962, 11070, 6390, 11430, 8142, 4518, 5814, 5034, 3885, 10584, 7812, 6894, 5670, 7290, 1320, 6270, 3402, 1764, 8250, 6762, 4800, 7110, 7890, 6150, 1806, 9690, 9930, 5886, 3105, 3960, 9510, 5100, 8022, 3330, 4374, 11286, 8658, 3267, 5742, 3615, 5262, 6474, 3682, 2544, 1850, 5706, 4260, 3738, 5574, 4026, 4482, 5190, 7686, 2280, 1554, 6810, 3710, 2898, 4872, 3060, 2664, 10470, 3170, 4698, 2412, 2706, 6594, 1950, 1410, 2124, 1674, 1446, 2226, 3542, 2778, 3430, 2754, 2520, 9750, 4130, 1914, 9570, 8082, 2050, 2160, 2994, 1992, 1296, 2106, 1788, 2034, 2634, 2352, 1746, 2088, 6114, 2178, 7230, 3126, 1872, 8874, 1608, 2814, 2250, 2682, 2502, 7326, 1518, 1374, 1332, 4054, 1694, 3846, 1398, 3082, 2328, 2142, 4734, 10830, 1498, 2950, 5642, 3038, 2454, 2592, 1308, 8930, 2856, 6852, 3762, 7392, 8742, 1660, 1470, 9630, 1730, 6180, 1822, 1930, 2430, 4974, 8484, 4446, 1622, 4338, 4182, 1590, 1974, 2790, 3486, 7614, 3220, 2922, 11583, 1362, 10410, 3798, 3596, 3354, 1572, 6234, 3906, 11370, 5922, 10668, 2874, 5778, 1458, 2208, 3390, 8298, 3630, 1834, 7500, 1484, 3276, 2262, 2650, 6318, 4082, 11010, 10122, 11172, 3454, 4314, 1778, 1530, 4638, 3876, 5964, 2838, 5390, 3018, 5520, 2298, 1422, 3102, 1902, 1338, 4890, 8772, 1506, 10878, 1650, 8406, 3256, 8220, 5340, 7452, 4858, 1680, 3318, 4110, 2190, 2562, 9108, 10200, 4012, 7254, 1960, 6042, 3534, 4392, 8580, 1722, 1860, 8514, 11580, 2346, 1758, 4530, 3186, 4494, 2022, 6708, 9000, 11250, 4560, 9078, 2236, 6958, 5310, 8106, 2940, 8040, 1566, 1596, 9300, 2484, 1800, 2460, 4422, 4690, 1050, 1580, 6660, 4368, 2380, 3610, 2530, 3410, 7074, 8352, 6450, 3969, 9372, 2440, 9702, 1442, 1944, 6798, 7560, 3468, 2702, 8470, 7194, 4932, 2736, 2618, 5148, 1878, 9398, 2772, 9912, 2056, 4452, 11585, 9594, 2710, 4704, 9960, 10026, 2820, 6066, 9834, 4740, 5016, 5064, 10332, 3675, 5208, 3564, 9464, 1626, 8910, 10494, 9540, 2990, 2808, 3130, 8850, 3948, 2000, 2886, 10260, 5970, 5250, 4212, 3726, 602, 9756, 7740, 1494, 6966, 5628, 3870, 1986, 6534, 7896, 2100, 4248, 1702, 2910, 3900, 6, 11581, 10764, 2080, 1734, 4270, 6570, 10788, 10374, 2210, 3002, 11579, 5586, 5434, 938, 3978, 4674, 1542, 6864, 350, 3690, 10458, 5478, 832, 8280, 3680, 1474, 5880, 1225, 11577, 8184, 7830, 2130, 3108, 5544, 441, 11575, 11584, 2166, 5724, 4851, 1812, 11571, 1848, 4578, 11573, 3594, 2108, 2156, 3270, 3066, 1298, 7021, 4350, 11397, 7550, 11100, 196, 6846, 5796, 1918, 4044, 9230, 10795, 60, 3294, 10011, 11175, 1610, 11220, 3350, 11052, 9453, 1290, 5220, 5676, 1323, 7038, 9801, 2340, 3618, 7164, 918, 2196, 3658, 3045, 10353, 3927, 4140, 4563, 11400, 6984, 11460, 2266, 2286, 5313, 7605, 10731, 4066, 64, 4470, 4845, 8385, 6156, 9792, 2907, 5445, 1340, 600, 1314, 45, 5772, 3380, 5838, 9591, 9620, 1326, 4092, 4284, 4431, 10404, 8475, 588, 3080, 4614, 10153, 2700, 11289, 8624, 11325, 5022, 810, 8883, 266, 4500, 2652, 2320, 6027, 11514, 175, 5904, 1352, 224, 4375, 9438, 3441, 8736, 1089, 735, 1662, 8206, 2, 1368, 9280, 2527, 5170, 10540, 378, 104, 49, 528, 2712, 135, 1682, 3040, 3432, 3629, 6840, 11316, 150, 4930, 10585, 88, 1809, 2354, 8628, 2094, 7998, 325, 480, 1376, 2268, 9006, 2046, 3059, 3265, 4710, 8649, 8814, 11195, 330, 820, 830, 1311, 2991, 3113, 3353, 3971, 6765, 9093, 9455, 10571, 11476, 34, 38, 53, 85, 132, 147, 280, 318, 329, 534, 539, 555, 557, 591, 615, 621, 623, 637, 796, 983, 2031, 2177, 2807, 2867, 2901, 3003, 3155, 3189, 3307, 3357, 3399, 3491, 3541, 3633, 3691, 3741, 3799, 3849, 3973, 8209, 8331, 8477, 8761, 8899, 9215, 9563, 9741, 9927, 10307, 10735};
		tDivBounds[28]=127; /* 953 k */ kArrays[28] = new int[] {6930, 8190, 2310, 1890, 11550, 4095, 3150, 3465, 15015, 9450, 630, 12285, 2970, 11970, 5985, 4725, 1170, 2730, 3990, 10395, 450, 13650, 3510, 1575, 990, 4950, 1386, 5775, 1350, 14850, 1638, 6630, 13860, 6825, 13230, 6510, 4620, 15470, 6426, 4410, 10710, 10010, 6300, 3570, 11025, 6210, 5850, 8694, 12870, 8775, 8085, 8316, 12705, 4290, 9765, 3780, 540, 7020, 7140, 14700, 15330, 7722, 8550, 5130, 10920, 6090, 16380, 12600, 9030, 14490, 16170, 11880, 13050, 9555, 15390, 7770, 5490, 3654, 5940, 3060, 7854, 2925, 12090, 11700, 10230, 4830, 12390, 8970, 7980, 4650, 10626, 9690, 11610, 7590, 15540, 9870, 1995, 8415, 3375, 11130, 9990, 15180, 14322, 14040, 11286, 7350, 8820, 12810, 9135, 6468, 12750, 4554, 6390, 9240, 7245, 3822, 7470, 10098, 2100, 16254, 4158, 7686, 15834, 14910, 2574, 13545, 14586, 7530, 12012, 3900, 6570, 6660, 10350, 13950, 11430, 11490, 7434, 13335, 10770, 2070, 12540, 14430, 14190, 15930, 13110, 6720, 11214, 7182, 11340, 7650, 10050, 15750, 9390, 4230, 9324, 12990, 16065, 5610, 8850, 11781, 15120, 9810, 5880, 10570, 9180, 9090, 8730, 9282, 7050, 5070, 6870, 7938, 8610, 6966, 6345, 10296, 9630, 12936, 7398, 5310, 8514, 13398, 10170, 6138, 2790, 4347, 8154, 10980, 8358, 4482, 6762, 10830, 2610, 5370, 15678, 7110, 7812, 2226, 4200, 13170, 11070, 10650, 5190, 3120, 6045, 7308, 12330, 5400, 14130, 3675, 5265, 3330, 6270, 5160, 13710, 5706, 7890, 3762, 9918, 4998, 9570, 12210, 9510, 13452, 4788, 11382, 10494, 13770, 8658, 2442, 12150, 3234, 4890, 10878, 8470, 15246, 6174, 8226, 5910, 5340, 5640, 8022, 6900, 6594, 8274, 5445, 5580, 5220, 8106, 6240, 4510, 5040, 8430, 4450, 2286, 16110, 5530, 5670, 4266, 16002, 8778, 2334, 1830, 11934, 3010, 12690, 14382, 1950, 5994, 7266, 11826, 6690, 8910, 3630, 6534, 3870, 2270, 7614, 2832, 2592, 2676, 15606, 4130, 2210, 1870, 4690, 2754, 4382, 14790, 14250, 11160, 6990, 3354, 4590, 14640, 3738, 4920, 4862, 5098, 11664, 13590, 2142, 7080, 4760, 9954, 2166, 16314, 2016, 13290, 3090, 10530, 14550, 2772, 10440, 4018, 3942, 4314, 2874, 3270, 4530, 2530, 3198, 5742, 2184, 12450, 2646, 6354, 2254, 2814, 5820, 7566, 2084, 9738, 1902, 6798, 2710, 4182, 2500, 12270, 1848, 2410, 2850, 2990, 15054, 2462, 10260, 3966, 13350, 3486, 14094, 8064, 2394, 4974, 9366, 1934, 2352, 3420, 3294, 12642, 2550, 3030, 2898, 9198, 2046, 3714, 2376, 3800, 1976, 4810, 7218, 3846, 11766, 3534, 5550, 12510, 2628, 1918, 6030, 12060, 13986, 1962, 2118, 14970, 7494, 2030, 4046, 2240, 13518, 6114, 2480, 10140, 2950, 2694, 3174, 2928, 3594, 3400, 3442, 2000, 4430, 4092, 4248, 13806, 3216, 5778, 2426, 8586, 10398, 11250, 5250, 13896, 5970, 6834, 3132, 15876, 9414, 5430, 9486, 3918, 4068, 2514, 4718, 2198, 6060, 4674, 3312, 2156, 2058, 9132, 5022, 3690, 3254, 9000, 11022, 2660, 10962, 1860, 9072, 3550, 4338, 3610, 5282, 3462, 15450, 8400, 9786, 3378, 4572, 10674, 15804, 14742, 3108, 5460, 9672, 1990, 3040, 2130, 6498, 8946, 9828, 4362, 6330, 8890, 5502, 3078, 1880, 10200, 10746, 2320, 3888, 6450, 2298, 16050, 2914, 15300, 7380, 2562, 2366, 3674, 4116, 7742, 9600, 9540, 10584, 16200, 16383, 11088, 4458, 2862, 10788, 8478, 1836, 8148, 4746, 7920, 4218, 11748, 6750, 11565, 15516, 8250, 2798, 14310, 2880, 2744, 15030, 3000, 7170, 12900, 11466, 5694, 4840, 2170, 5802, 10332, 2448, 7230, 4140, 6150, 3276, 5712, 7290, 4623, 7320, 3162, 8640, 1940, 2114, 12402, 15660, 3336, 1914, 10452, 5110, 2490, 12582, 2382, 4386, 2964, 13572, 1926, 4914, 3190, 6180, 11526, 2542, 4032, 2718, 3360, 12366, 4004, 15708, 7794, 13482, 12155, 3498, 1112, 15960, 5054, 8019, 8748, 2340, 12222, 7830, 11310, 12762, 3528, 4932, 6000, 4489, 13020, 11592, 16381, 5760, 2940, 2034, 6396, 2090, 11814, 3588, 6540, 13140, 12852, 5166, 1470, 11172, 13068, 4614, 2006, 3474, 12276, 3636, 3390, 7950, 2466, 4642, 12492, 10062, 6622, 9900, 5146, 8280, 6372, 12180, 5200, 3708, 8130, 4770, 3744, 2600, 9720, 12714, 11868, 864, 13689, 3012, 9156, 15210, 16379, 2274, 13207, 11628, 6780, 3724, 8322, 2580, 7998, 14184, 5343, 12126, 16377, 5256, 15066, 15600, 2980, 13320, 4500, 5238, 13608, 2222, 1980, 3969, 4872, 88, 11894, 3842, 2260, 8100, 2632, 2618, 4698, 8028, 6846, 3054, 3864, 5394, 9774, 3930, 8370, 6942, 5418, 16373, 16375, 8466, 2678, 16371, 3430, 16369, 4744, 5334, 13186, 15510, 5076, 5628, 13728, 13244, 12320, 13662, 3956, 5462, 3252, 6810, 4020, 4110, 5547, 1968, 14357, 2766, 2396, 15642, 5600, 14535, 7210, 2028, 4086, 4170, 6600, 15931, 14280, 5368, 16382, 2778, 3978, 16214, 15657, 2430, 5313, 392, 10392, 9075, 7410, 8251, 7238, 986, 14214, 5454, 2418, 2828, 11907, 5658, 8802, 14820, 15225, 13861, 14455, 2907, 14952, 7758, 12974, 5562, 9165, 14945, 2886, 11910, 15051, 5716, 2834, 15532, 14370, 5017, 7452, 2025, 15990, 14460, 9102, 13727, 4026, 13695, 6125, 6160, 10540, 12586, 600, 4289, 16352, 18, 15444, 6845, 5267, 10850, 378, 405, 14170, 12312, 9646, 15753, 4, 2072, 8450, 4730, 4818, 3816, 14652, 1818, 2106, 5887, 3410, 12045, 14522, 8010, 1210, 2520, 802, 9234, 5819, 1608, 175, 10179, 4375, 9036, 4268, 2873, 4320, 13653, 150, 588, 11730, 13485, 15010, 15890, 8740, 770, 6149, 9605, 4292, 5284, 7504, 1705, 14823, 126, 9251, 13878, 14365, 1258, 5655, 25, 132, 6153, 1936, 3591, 12213, 16280, 5822, 5928, 7315, 1534, 6561, 49, 1215, 3612, 6127, 11, 230, 14880, 42, 4354, 6115, 14, 135, 5348, 5882, 7236, 7532, 15813, 1573, 4351, 4524, 5852, 6715, 7480, 10219, 11028, 12954, 13293, 14946, 15939, 16320, 63, 294, 458, 570, 6615, 7011, 9252, 9300, 637, 1061, 1113, 1260, 1273, 1332, 1682, 1977, 1978, 2739, 4217, 4388, 4597, 4601, 4673, 4839, 5407, 6909, 7737, 10231, 11109, 12555, 15855, 22, 78, 125, 272, 282, 382, 403, 418, 467, 713, 833, 893, 1003, 1430, 1554, 1855, 2144, 3444, 4097, 4123, 4157, 4259, 4293, 4369, 4395, 4445, 4521, 4547, 4715, 4765, 4857, 4899, 4949, 4991, 5041, 5083, 5133, 5191, 5241, 5299, 5349, 5457, 5581, 5689, 5763, 5829, 6027, 6167, 6249, 6323, 6389, 6479, 6717, 6807, 6905, 7093, 7183, 7281, 7387, 7501, 7607, 7827, 7957, 8079, 16290};
		
		for (int bits=3;bits<=MAX_BITS;bits++) {
			int len = kArrays[bits].length;
			kSqrtArrays[bits] = new double[len];
			for (int i=0; i<len; i++) {
				kSqrtArrays[bits][i] = Math.sqrt(kArrays[bits][i]);
			}
		}
	}
	
	/**
	 * Full constructor.
	 * @param doTDivFirst If true then trial division is done before the Lehman loop.
	 * This is recommended if arguments N are known to have factors < cbrt(N) frequently.
	 */
	public Hart_MultiplierChain_SqrtN(boolean doTDivFirst) {
		this.doTDivFirst = doTDivFirst;
	}
	
	@Override
	public String getName() {
		return "Hart_MultiplierChain_SqrtN(" + doTDivFirst + ")";
	}

	@Override
	public BigInteger findSingleFactor(BigInteger N) {
		return BigInteger.valueOf(findSingleFactor(N.longValue()));
	}

	/**
	 * Find a factor of long N.
	 * @param N
	 * @return factor of N
	 */
	public long findSingleFactor(long N) {
		int NBits = 64 - Long.numberOfLeadingZeros(N);
		// do trial division before the Hart loop ?
		long factor;
		if (doTDivFirst) {
			tdiv.setTestLimit(tDivBounds[NBits]);
			if ((factor = tdiv.findSingleFactor(N))>1) return factor;
		}
		
		this.N = N;
		fourN = N<<2;
		sqrt4N = Math.sqrt(fourN);
		int[] kArray = kArrays[NBits];
		double[] kSqrtArray = kSqrtArrays[NBits];
		if ((factor = test(kArray, kSqrtArray, kArray.length)) > 1) return factor;
		return 0;
	}
	
	private long test(int[] kArray, double[] kSqrtArray, int size) {
		for (int i=0; i < size; i++) {
			long k = kArray[i];
			long a = (long) (sqrt4N * kSqrtArray[i] + ROUND_UP_DOUBLE);
			if ((k&1)==0) {
				// even k -> a must be odd
				a |= 1;
			} else {
				// odd k -> more complicated adjustments (here: multiplicative)
				long kNp1 = k*N+1;
				if ((kNp1 & 3) == 0) {
					a += (kNp1 - a) & 7;
				} else if ((kNp1 & 7) == 6) {
					final long adjust1 = (kNp1 - a) & 31;
					final long adjust2 = (-kNp1 - a) & 31;
					a += adjust1<adjust2 ? adjust1 : adjust2;
				} else { // (kN+1) == 2 (mod 8)
					final long adjust1 = (kNp1 - a) & 15;
					final long adjust2 = (-kNp1 - a) & 15;
					a += adjust1<adjust2 ? adjust1 : adjust2;
				}
			}
			long test = a*a - k * fourN;
			long b = (long) Math.sqrt(test);
			if (b*b == test) {
				return gcdEngine.gcd(a+b, N);
			}
		}
		return 0;
	}
}
